import React, { useState, useEffect } from 'react'; // Hook para manejar el estado y efectos
import axios from 'axios'; // Cliente HTTP para hacer peticiones al backend
import { useNavigate, Link } from 'react-router-dom'; // Navegaci√≥n y enlaces
import './login.css'; // Estilos personalizados del componente Login

const Login = () => {
  // Estado para almacenar los datos del formulario
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });

  const [error, setError] = useState(''); // Estado para almacenar errores
  const [message, setMessage] = useState(''); // Estado para almacenar mensajes de √©xito
  const navigate = useNavigate(); // Hook para la navegaci√≥n

  //  Estado y l√≥gica para el carrusel de im√°genes
  const [currentImageIndex, setCurrentImageIndex] = useState(0); // √çndice de la imagen actual
  const images = [
    "/icons/imagen1.jpg",
    "/icons/imagen2.jpg",
    "/icons/imagen3.jpg",
    "/icons/imagen4.jpg"
  ];

  //  Cambia la imagen autom√°ticamente cada 3 segundos
  useEffect(() => {
    const interval = setInterval(() => {
      handleNext(); // Usa la misma l√≥gica de la flecha derecha
    }, 3000);

    return () => clearInterval(interval); // Limpia el intervalo al desmontar
  }, []);

  //  Funci√≥n para ir a la imagen anterior
  const handlePrev = () => {
    setCurrentImageIndex((prevIndex) =>
      prevIndex === 0 ? images.length - 1 : prevIndex - 1
    );
  };

  //  Funci√≥n para ir a la imagen siguiente
  const handleNext = () => {
    setCurrentImageIndex((prevIndex) => (prevIndex + 1) % images.length);
  };

  // Funci√≥n que maneja los cambios en los campos de entrada
  const handleChange = (e) => {
    const { name, value } = e.target; // Obtiene el nombre y el valor del campo
    setFormData({
      ...formData, // Mantiene los valores anteriores
      [name]: value // Actualiza solo el campo que cambi√≥
    });
  };

  // Funci√≥n para enviar los datos del formulario
  const handleSubmit = async (e) => {
    e.preventDefault(); // Previene el comportamiento por defecto (recarga de la p√°gina)

    try {
      // Realiza la petici√≥n POST al backend con los datos del formulario
      const response = await axios.post('http://localhost:3000/api/users/login', formData);

      if (response.data.token) {
        setMessage('Inicio de sesi√≥n exitoso'); // Muestra mensaje de √©xito si hay un token
        localStorage.setItem('token', response.data.token); // Almacena el token en el localStorage
        setError(''); // Limpia cualquier error previo
        navigate('/principal'); // Redirige a la p√°gina principal
      } else {
        // Si no se obtiene un token, muestra un mensaje de error
        setError(response.data.message || 'Credenciales incorrectas');
        setMessage(''); // Limpia cualquier mensaje previo
      }
    } catch (err) {
      // Maneja errores de conexi√≥n o cualquier otro tipo de error
      setError(err.response ? err.response.data.message : 'Error de conexi√≥n');
      setMessage(''); // Limpia cualquier mensaje previo
    }
  };

  return (
    <div className="login-page">
      <div className="top-banner">
        <img src="/icons/Logo.png" alt="Logo" className="logo-img" /> {/* Muestra el logo */}
        <h1 className="app-name">STRACKWAVE</h1> {/* T√≠tulo de la aplicaci√≥n */}
      </div>

      <div className="middle-section">
        <img src="/icons/fondo.png" alt="Fondo" className="background-img" /> {/* Imagen de fondo */}
        <div className="login-form-box">
          <h2>Iniciar Sesi√≥n</h2>
          {/* Muestra mensajes de √©xito o error */}
          {message && <p className="success-message">{message}</p>}
          {error && <p className="error-message">{error}</p>}
          {/* Formulario de inicio de sesi√≥n */}
          <form onSubmit={handleSubmit}>
            <input
              type="email"
              name="email"
              placeholder="Correo electr√≥nico"
              value={formData.email}
              onChange={handleChange} // Llama a handleChange para actualizar el estado
              required
            />
            <input
              type="password"
              name="password"
              placeholder="Contrase√±a"
              value={formData.password}
              onChange={handleChange} // Llama a handleChange para actualizar el estado
              required
            />
            <button type="submit">Iniciar sesi√≥n</button> {/* Bot√≥n para enviar el formulario */}
          </form>
          {/* Enlace para redirigir a la p√°gina de registro */}
          <p className="register-link">
            ¬øNo tienes cuenta a√∫n? <Link to="/register">Reg√≠strate aqu√≠</Link>
          </p>
        </div>
      </div>

      <div className="bottom-section">
        <div className="carousel-section">
          {/* üîπ Flechas izquierda y derecha para navegaci√≥n manual */}
          <button className="carousel-button left" onClick={handlePrev}>‚ùÆ</button>
          <img
            src={images[currentImageIndex]}
            alt={`Imagen ${currentImageIndex + 1}`}
            className="carousel-img"
          />
          <button className="carousel-button right" onClick={handleNext}>‚ùØ</button>
        </div>
        <div className="contact-section">
          <h3>Contacto</h3>
          {/* Informaci√≥n de contacto */}
          <p>üìû Tel√©fono: +123 456 7890</p>
          <p>üì¨ Correo: contacto@strackwave.com</p>
          <p>üìç Direcci√≥n: Sevilla, Espa√±a</p>
        </div>
      </div>
    </div>
  );
};

export default Login; // Exporta el componente Login para ser usado en otras partes de la aplicaci√≥n
